params {
    // Resources
    highMemForks = 2
    fatMemForks = 1
    // Aligned BAM file(s)
    sampleSheet = null
    // Output directory
    outdir = "results"
    // Number of threads
    cpus = 14
    // UPPMAX
    account = null
    memory = 20.GB
    time = '10-00:00:00'
    retry = 3

    // Workflow parameters
    clust_method = 'louvain'
    clust_res = "0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0,1.1,1.2,1.3,1.4,1.5"
}


profiles {
    local {
        executor {
            name = 'local'
            cpus = params.cpus
            memory = params.memory
        }
        process {
            errorStrategy = 'retry'
            maxRetries = "${params.retry}"
        withLabel: highMemST {
            cpus = 1
            maxForks = params.highMemForks
        }
        withLabel: highMemMT {
            cpus = Math.min(4, params.cpus as Integer)
            maxForks = params.highMemForks
            }
            withLabel: fatMemMT {
            cpus = Math.min(8, params.cpus as Integer)
            maxForks = params.fatMemForks
            }
        withLabel: lowMemST {
            cpus = 1
        }
        withLabel: lowMemMT {
            cpus = Math.min(2, params.cpus as Integer)
            }
        }
    }
    docker {
        docker.enabled = true
        executor {
            cpus = "${params.cpus}"
        }
    }
    arm {
        docker.runOptions = '--platform linux/amd64'
        executor {
            cpus = "${params.cpus}"
        }
    }
    apptainer {
        apptainer.enabled = true
        process.containerOptions = '--writable-tmpfs'
        executor {
            cpus = "${params.cpus}"
        }
    }
    conda {
        conda.enabled = true
        executor {
            cpus = "${params.cpus}"
        }
    }
    uppmax {
        process {
            executor       = 'slurm'
            clusterOptions = "-A '${params.account}'"
            memory         = { "${params.memory}" * task.attempt }
            cpus           = { "${params.cpus}" * task.attempt }
            time           = { "${params.time}" }
            scratch        = '$SNIC_TMP'
            errorStrategy  = 'retry'
            maxRetries     = "${params.retry}"
        }
    }
    test_full {
        params.sampleSheet = 'tests/sample_sheet.csv'
    }
}

/*
========================================================================================
    Nextflow Metrics & Reports
========================================================================================
*/

timeline {
  enabled = true
  file    = "${params.outdir}/timeline.html"
  overwrite = true
}

report {
  enabled = true
  file    = "${params.outdir}/report.html"
  overwrite = true
}
trace {
  enabled = true
  fields  = 'task_id,name,status,exit,realtime,%cpu,%mem,rss,vmem,peak_rss,peak_vmem,rchar,wchar'
  file    = "${params.outdir}/trace.txt"
  overwrite = true
}

dag {
    enabled = true
    file    = "${params.outdir}/dag.mmd"
    file = "${params.outdir}/dag.html"
    overwrite = true
}

manifest {
    name        = "nf-xen"
    description = "Workflow for 10X Xenium downstream analysis written in Nextflow"
    author      = "Aditya Singh"
    mainScript  = "main.nf"
    version     = "0.0.1-pre"
}